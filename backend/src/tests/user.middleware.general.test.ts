// Date: 2023-9-13
// Author: Generated by GoCodeo.

import { Request, Response, NextFunction } from "express";
import { dateIsValid, registerMW, loginMW } from "../middlewares/user.middleware.js";

describe("dateIsValid", () => {
  it("should return true for a valid date string", () => {
    expect(dateIsValid("2022-01-01")).toBe(true);
  });

  it("should return true for a valid date number", () => {
    expect(dateIsValid(1640995200000)).toBe(true);
  });

  it("should return false for an invalid date string", () => {
    expect(dateIsValid("invalidDate")).toBe(false);
  });

  it("should return false for an invalid date number", () => {
    expect(dateIsValid(NaN)).toBe(false);
  });
});

describe("registerMW", () => {
  let req: Request;
  let res: Response;
  let next: NextFunction;

  beforeEach(() => {
    req = {
      body: {}
    } as Request;
    res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn()
    } as unknown as Response;
    next = jest.fn();
  });

  it("should return 400 with error message if request body is empty", async () => {
    await registerMW(req, res, next);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({ message: "Request body is empty" });
  });

  it("should return 400 with error message if request body.name parameter is missing or empty", async () => {
    req.body.name = "";
    await registerMW(req, res, next);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({ message: "Request body.name parameter is missing or empty" });
  });

  it("should return 400 with error message if request body.surname parameter is missing or empty", async () => {
    req.body.surname = "";
    await registerMW(req, res, next);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({ message: "Request body.surname parameter is missing or empty" });
  });

  it("should return 400 with error message if request body.birthday parameter is missing or empty", async () => {
    req.body.birthday = "";
    await registerMW(req, res, next);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({ message: "Request body.birthday parameter is missing or empty" });
  });

  it("should return 400 with error message if request body.name parameter length is less than or equal to 3", async () => {
    req.body.name = "ab";
    await registerMW(req, res, next);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({ message: "Request body.name parameter must be between 3 and 50 characters" });
  });

  it("should return 400 with error message if request body.name parameter length is greater than 50", async () => {
    req.body.name = "a".repeat(51);
    await registerMW(req, res, next);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({ message: "Request body.name parameter must be between 3 and 50 characters" });
  });

  it("should return 400 with error message if request body.surname parameter length is less than or equal to 3", async () => {
    req.body.surname = "ab";
    await registerMW(req, res, next);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({ message: "Request body.surname parameter must be between 3 and 50 characters" });
  });

  it("should return 400 with error message if request body.surname parameter length is greater than 50", async () => {
    req.body.surname = "a".repeat(51);
    await registerMW(req, res, next);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({ message: "Request body.surname parameter 3 and 50 characters" });
  });

  it("should return 400 with error message if request body.birthday parameter is not a valid date", async () => {
    req.body.b = "invalidDate";
    await registerMW(req, res, next);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({ message: "Request body.birthday parameter is not a valid date" });
  });

  it("should call next if all validations pass", async () => {
    req.body.name = "John";
    req.body.surname = "Doe";
    req.body.birthday = "2022-01-01";
    await registerMW(req, res, next);
    expect(next).toHaveBeenCalled();
  });
});

describe("loginMW", () => {
  let req: Request;
  let res: Response;
  let next: NextFunction;

  beforeEach(() => {
    req = {
      body: {}
    } as Request;
    res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn()
    } as unknown as Response;
    next = jest.fn();
  });

  it("should return 400 with error message if request body is empty", async () => {
    await loginMW(req, res, next);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({ message: "Request body is empty" });
  });

  it("should return 400 with error message if request body.email parameter is missing or empty", async () => {
    req.body.email = "";
    await loginMW(req, res, next);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({ message: "Request body.email parameter is missing or empty" });
  });

  it("should return 400 with error message if request body.password parameter is missing or empty", async () => {
    req.body.password = "";
    await loginMW(req, res, next);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({ message: "Request body.password parameter is missing or empty" });
  });

  it("should return 400 with error message if request body.email parameter is not a valid email", async () => {
    req.body.email = "invalidEmail";
    await loginMW(req, res, next);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({ message: "Request body.email parameter is not a valid email" });
  });

  it("should return 400 with error message if request body.password parameter length is less than 8", async () => {
    req.body.password = "pass";
    await loginMW(req, res, next);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({ message: "Request body.password parameter must be between 8 and 50 characters" });
  });

  it("should return 400 with error message if request body.password parameter length is greater than 50", async () => {
    req.body.password = "a".repeat(51);
    await loginMW(req, res, next);
    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith({ message: "Request body.password parameter must be between 8 and 50 characters" });
  });

  it("should call next if all validations pass", async () => {
    req.body.email = "test@example.com";
    req.body.password = "password123";
    await loginMW(req, res, next);
    expect(next).toHaveBeenCalled();
  });
});