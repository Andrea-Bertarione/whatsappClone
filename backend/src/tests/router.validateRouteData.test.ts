// Date: 2023-9-14
// Author: Generated by GoCodeo.


import { validateRouteData } from "@noCategory/router.js";

describe("validateRouteData", () => {
  it("should return true for valid route data", () => {
    const routeData = {
      method: "GET",
      endpoint: "/api/users",
      middlewares: [],
      handler: () => {},
    };

    const result = validateRouteData(routeData);

    expect(result).toBe(true);
  });

  it("should return false for invalid route data with missing properties", () => {
    const routeData = {
      method: "GET",
      endpoint: "/api/users",
      handler: () => {},
    };

    const result = validateRouteData(routeData);

    expect(result).toBe(false);
  });

  it("should return false for invalid route data with incorrect property types", () => {
    const routeData = {
      method: "GET",
      endpoint: "/api/users",
      middlewares: "not an array",
      handler: "not a function",
    };

    const result = validateRouteData(routeData);

    expect(result).toBe(false);
  });

  it("should return false for invalid route data with additional properties", () => {
    const routeData = {
      method: "GET",
      endpoint: "/api/users",
      middlewares: [],
      handler: () => {},
      extraProperty: "extra",
    };

    const result = validateRouteData(routeData);

    expect(result).toBe(false);
  });

  it("should return false for invalid route data with empty object", () => {
    const routeData = {};

    const result = validateRouteData(routeData);

    expect(result).toBe(false);
  });

  it("should return false for invalid route data with null", () => {
    const routeData = null;

    const result = validateRouteData(routeData);

    expect(result).toBe(false);
  });

  it("should return false for invalid route data with undefined", () => {
    const routeData = undefined;

    const result = validateRouteData(routeData);

    expect(result).toBe(false);
  });

  it("should return false for invalid route data with number", () => {
    const routeData = 123;

    const result = validateRouteData(routeData);

    expect(result).toBe(false);
  });

  it("should return false for invalid route data with string", () => {
    const routeData = "invalid";

    const result = validateRouteData(routeData);

    expect(result).toBe(false);
  });

  it("should return false for invalid route data with boolean", () => {
    const routeData = true;

    const result = validateRouteData(routeData);

    expect(result).toBe(false);
  });
});